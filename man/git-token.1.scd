git-token(1)

# NAME

git-token - Securely manage GitHub tokens locally

# SYNOPSIS

git token [<options>] <user> [<token>]

# DESCRIPTION

git-token was created for users that work with git on shared machines. On these
machines it can be unsuitable to install SSH keys. Alternatively, repositories
can interact with their remotes using HTTPS. The user must then provide
a username and password to access protected repositories through HTTPS.

In the case of GitHub the password will not be the user's GitHub password, but
a token generated by GitHub. Although very difficult to remember, these tokens
offers a very fine-grained control over what a user can do with a repository
using them. Another benefit is that they can set to expire after some time or
be manually revoked when needed.

git-token makes it simple for users to manage their GitHub tokens locally.
A side-effect is that multiple users can work seamlessly on the same machine,
accessing protected remotes with their own credentials.

## Saving a token

git-token will encrypt and store your token. When calling this command,

```
git token bo 12345
```

you will be prompted a few questions. These include, which domain are you
belonging (e.g. an enterprise GitHub solution? Default is just _github.com_),
what is your username there, which password do you want to encrypt the token
with.

```
$ git token bo 12345
Domain (github.com): gh.boek.com
Username (bo): boek
Name (optional): Bo Ek
Email (optional): bo.ek@email.com
Password:
```

In this example the user is named _Bo Ek_. Their username is _boek_ at their
account on _gh.boek.com_. In case Bo was instead using _github.com_, the domain
prompt could have been empty since the default is just that. Bo's username on
_gh.boek.com_ does not necessarily have to be the same as the local name. Here
Bo decided that the local name is _bo_ while the _gh.boek.com_ username is
_boek_.

By supplying name and email the user can rest assured it is he/she that authored
the last commit as git-token will automatically check git-config during token
retrieval and warn you if necessary.

## Loading a token

The program will try to decrypt the token with the supplied password, print it,
and call git-credential to temporarily cache the login credentials. The latter
part will make it easier to interact with git since then the entire git suite
will have access to the cached credentials for a limited time.

The following is an example of a user retreiving a token with git-token.

```
$ git token bo
Password:
Found token "12345" and cached it for a limited time.
```

## Enabling git credentials

To use git-credential-cache, an important part of git-token, you only need to
call git-token with the *-e* option once and git-token will enable
git-credential-cache for you.

## Fixing author

If you have made a commit under the wrong authorship git-token will help you
easily solve that with one command. Call git-token with the *--recommit* option
and git-token will re-commit the last commit (with the same message) using you
as the author.

```
git token --recommit bo
```

# OPTIONS

*-h, --help*
	Show this help message.

*-v, --version*
	Print the git-token version.

*-e, --enable*
	Enable git credential-cache in globally.

*-r, --remove*
	Remove token.

*-f, --force*
	Write over any existing token.

*-u, --update*
	Update token for existing user. Requires TOKEN argument is set.

*-t SEC, --timeout=SEC*
	Set git credential-cache timeout to SECONDS (default "900"). Can only be
	used with -e option.

*--only-token*
	Do not automatically set name/email.

*--recommit*
	Redo the last commit but using the current author.

*--login-ghcr*
	Sign in to the GitHub Container Registry.

